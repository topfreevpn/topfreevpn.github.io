<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://topfreevpn.github.io/news/article-60583.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>【mq】从零开始实现 mq-01-生产者、消费者启动</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。 指把要传输的数据（消息）放在队列中，用队列机制来实现消息传递——生产者产生消息并把消息放入队列，然后由消费者去" />
    
    <!-- Favicon -->
    <link href="/assets/website/img/v2rayclashfree/favicon.ico" rel="icon">

    <meta name="author" content="最佳免费VPN 机场订阅节点中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://topfreevpn.github.io/news/article-60583.htm" />
    <meta property="og:site_name" content="最佳免费VPN 机场订阅节点中文网" />
    <meta property="og:title" content="【mq】从零开始实现 mq-01-生产者、消费者启动" />
    <meta property="og:image" content="https://topfreevpn.github.io/uploads/20240605/6a3a54a2dcc54e1f6963def29c98efc2.webp" />
        <meta property="og:release_date" content="2025-02-21T09:21:45" />
    <meta property="og:updated_time" content="2025-02-21T09:21:45" />
        <meta property="og:description" content="MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。 指把要传输的数据（消息）放在队列中，用队列机制来实现消息传递——生产者产生消息并把消息放入队列，然后由消费者去" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="【mq】从零开始实现 mq-01-生产者、消费者启动">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z43TVP4HME"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z43TVP4HME');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <a href="/" class="logo">
                        <span>最佳免费VPN</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Ioniq</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>【mq】从零开始实现 mq-01-生产者、消费者启动</h1>
                    <p>
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1 bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				</h1> <p>MQ（Message Queue）消息队列，是基础数据结构中“先进先出”的一种数据结构。</p> <p>指把要传输的数据（消息）放在队列中，用队列机制来实现消息传递——生产者产生消息并把消息放入队列，然后由消费者去处理。</p> <p>消费者可以到指定队列拉取消息，或者订阅相应的队列，由MQ服务端给其推送消息。</p> <h2 id="mq-的作用">MQ 的作用？</h2> <p>消息队列中间件是分布式系统中重要的组件，主要解决应用解耦，异步消息，流量削锋等问题，实现高性能，高可用，可伸缩和最终一致性架构。</p> <p>解耦：一个业务需要多个模块共同实现，或者一条消息有多个系统需要对应处理，只需要主业务完成以后，发送一条MQ，其余模块消费MQ消息，即可实现业务，降低模块之间的耦合。</p> <p>异步：主业务执行结束后从属业务通过MQ，异步执行，减低业务的响应时间，提高用户体验。</p> <p>削峰：高并发情况下，业务异步处理，提供高峰期业务处理能力，避免系统瘫痪。</p> <p>ps: 以上内容摘选自百科。</p> </h1> <h2 id="maven-引入">maven 引入</h2> <pre><code class="language-xml">&lt;dependency&gt;     &lt;groupId&gt;io.netty&lt;/groupId&gt;     &lt;artifactId&gt;netty-all&lt;/artifactId&gt;     &lt;version&gt;4.1.42.Final&lt;/version&gt; &lt;/dependency&gt;  &lt;dependency&gt;     &lt;groupId&gt;com.alibaba&lt;/groupId&gt;     &lt;artifactId&gt;fastjson&lt;/artifactId&gt;     &lt;version&gt;1.2.76&lt;/version&gt; &lt;/dependency&gt;</code></pre> <h2 id="模块划分">模块划分</h2> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/houbb/mq"  target="_blank" rel="nofollow">The message queue in java.</a> 作为 mq 的从零开始的学习项目，目前已开源。</p> <p>项目的模块如下：</p> <table> <thead> <tr> <th style="text-align: left">模块</th> <th style="text-align: left">说明</th> </tr> </thead> <tbody> <tr> <td style="text-align: left">mq-common</td> <td style="text-align: left">公共代码</td> </tr> <tr> <td style="text-align: left">mq-broker</td> <td style="text-align: left">注册中心</td> </tr> <tr> <td style="text-align: left">mq-producer</td> <td style="text-align: left">消息生产者</td> </tr> <tr> <td style="text-align: left">mq-consumer</td> <td style="text-align: left">消息消费者</td> </tr> </tbody> </table> </h1> <h2 id="接口定义">接口定义</h2> <pre><code class="language-java">package com.github.houbb.mq.consumer.api;  /**  * @author binbin.hou  * @since 1.0.0  */ public interface IMqConsumer {      /**      * 订阅      * @param topicName topic 名称      * @param tagRegex 标签正则      */     void subscribe(String topicName, String tagRegex);      /**      * 注册监听器      * @param listener 监听器      */     void registerListener(final IMqConsumerListener listener);  }</code></pre> <p><code>IMqConsumerListener</code> 作为消息监听类的接口，定义如下：</p> <pre><code class="language-java">public interface IMqConsumerListener {       /**      * 消费      * @param mqMessage 消息体      * @param context 上下文      * @return 结果      */     ConsumerStatus consumer(final MqMessage mqMessage,                             final IMqConsumerListenerContext context);  }</code></pre> <p>ConsumerStatus 代表消息消费的几种状态。</p> <h2 id="消息体">消息体</h2> <p>启动消息体 MqMessage 定义如下：</p> <pre><code class="language-java">package com.github.houbb.mq.common.dto;  import java.util.Arrays; import java.util.List;  /**  * @author binbin.hou  * @since 1.0.0  */ public class MqMessage {      /**      * 标题名称      */     private String topic;      /**      * 标签      */     private List&lt;String&gt; tags;      /**      * 内容      */     private byte[] payload;      /**      * 业务标识      */     private String bizKey;      /**      * 负载分片标识      */     private String shardingKey;      // getter&amp;setter&amp;toString  }</code></pre> <h2 id="push-消费者策略实现">push 消费者策略实现</h2> <p>消费者启动的实现如下：</p> <pre><code class="language-java">/**  * 推送消费策略  *  * @author binbin.hou  * @since 1.0.0  */ public class MqConsumerPush extends Thread implements IMqConsumer  {      // 省略...      @Override     public void run() {         // 启动服务端         log.info("MQ 消费者开始启动服务端 groupName: {}, port: {}, brokerAddress: {}",                 groupName, port, brokerAddress);          EventLoopGroup bossGroup = new NioEventLoopGroup();         EventLoopGroup workerGroup = new NioEventLoopGroup();          try {             ServerBootstrap serverBootstrap = new ServerBootstrap();             serverBootstrap.group(workerGroup, bossGroup)                     .channel(NioServerSocketChannel.class)                     .childHandler(new ChannelInitializer&lt;Channel&gt;() {                         @Override                         protected void initChannel(Channel ch) throws Exception {                             ch.pipeline().addLast(new MqConsumerHandler());                         }                     })                     // 这个参数影响的是还没有被accept 取出的连接                     .option(ChannelOption.SO_BACKLOG, 128)                     // 这个参数只是过一段时间内客户端没有响应，服务端会发送一个 ack 包，以判断客户端是否还活着。                     .childOption(ChannelOption.SO_KEEPALIVE, true);              // 绑定端口，开始接收进来的链接             ChannelFuture channelFuture = serverBootstrap.bind(port).syncUninterruptibly();             log.info("MQ 消费者启动完成，监听【" + port + "】端口");              channelFuture.channel().closeFuture().syncUninterruptibly();             log.info("MQ 消费者关闭完成");         } catch (Exception e) {             log.error("MQ 消费者启动异常", e);             throw new MqException(ConsumerRespCode.RPC_INIT_FAILED);         } finally {             workerGroup.shutdownGracefully();             bossGroup.shutdownGracefully();         }       }       // 省略...  }</code></pre> <p>ps: 初期我们把 consumer 作为服务端，后续引入 broker 则只有 broker 是服务端。</p> <h2 id="mqconsumerhandler-处理类">MqConsumerHandler 处理类</h2> <p>这个类是一个空的实现。</p> <pre><code class="language-java">public class MqConsumerHandler extends SimpleChannelInboundHandler {      @Override     protected void channelRead0(ChannelHandlerContext channelHandlerContext, Object object) throws Exception {         //nothing     }  }</code></pre> <h2 id="测试代码">测试代码</h2> <pre><code class="language-java">MqConsumerPush mqConsumerPush = new MqConsumerPush(); mqConsumerPush.start();</code></pre> <p>启动日志：</p> <pre><code>[DEBUG] [2022-04-21 19:16:41.343] [main] [c.g.h.l.i.c.LogFactory.setImplementation] - Logging initialized using 'class com.github.houbb.log.integration.adaptors.stdout.StdOutExImpl' adapter. [INFO] [2022-04-21 19:16:41.356] [Thread-0] [c.g.h.m.c.c.MqConsumerPush.run] - MQ 消费者开始启动服务端 groupName: C_DEFAULT_GROUP_NAME, port: 9527, brokerAddress:  [INFO] [2022-04-21 19:16:43.196] [Thread-0] [c.g.h.m.c.c.MqConsumerPush.run] - MQ 消费者启动完成，监听【9527】端口</code></pre> </h1> <h2 id="接口定义-1">接口定义</h2> <p>最基本的消息发送接口。</p> <pre><code class="language-java">package com.github.houbb.mq.producer.api;  import com.github.houbb.mq.common.dto.MqMessage; import com.github.houbb.mq.producer.dto.SendResult;  /**  * @author binbin.hou  * @since 1.0.0  */ public interface IMqProducer {      /**      * 同步发送消息      * @param mqMessage 消息类型      * @return 结果      */     SendResult send(final MqMessage mqMessage);      /**      * 单向发送消息      * @param mqMessage 消息类型      * @return 结果      */     SendResult sendOneWay(final MqMessage mqMessage);  }</code></pre> <h2 id="生产者实现">生产者实现</h2> <p>MqProducer 启动的实现如下，基于 netty。</p> <pre><code class="language-java">package com.github.houbb.mq.producer.core;  /**  * 默认 mq 生产者  * @author binbin.hou  * @since 1.0.0  */ public class MqProducer extends Thread implements IMqProducer {      //省略...      @Override     public void run() {         // 启动服务端         log.info("MQ 生产者开始启动客户端 GROUP: {}, PORT: {}, brokerAddress: {}",                 groupName, port, brokerAddress);          EventLoopGroup workerGroup = new NioEventLoopGroup();          try {             Bootstrap bootstrap = new Bootstrap();             ChannelFuture channelFuture = bootstrap.group(workerGroup)                     .channel(NioSocketChannel.class)                     .option(ChannelOption.SO_KEEPALIVE, true)                     .handler(new ChannelInitializer&lt;Channel&gt;(){                         @Override                         protected void initChannel(Channel ch) throws Exception {                             ch.pipeline()                                     .addLast(new LoggingHandler(LogLevel.INFO))                                     .addLast(new MqProducerHandler());                         }                     })                     .connect("localhost", port)                     .syncUninterruptibly();              log.info("MQ 生产者启动客户端完成，监听端口：" + port);             channelFuture.channel().closeFuture().syncUninterruptibly();             log.info("MQ 生产者开始客户端已关闭");         } catch (Exception e) {             log.error("MQ 生产者启动遇到异常", e);             throw new MqException(ProducerRespCode.RPC_INIT_FAILED);         } finally {             workerGroup.shutdownGracefully();         }     }      //省略... }</code></pre> <h2 id="mqproducerhandler-处理类">MqProducerHandler 处理类</h2> <p>默认的空实现，什么都不做。</p> <pre><code class="language-java">package com.github.houbb.mq.producer.handler;  import io.netty.channel.ChannelHandlerContext; import io.netty.channel.SimpleChannelInboundHandler;  /**  * @author binbin.hou  * @since 1.0.0  */ public class MqProducerHandler extends SimpleChannelInboundHandler {      @Override     protected void channelRead0(ChannelHandlerContext channelHandlerContext, Object object) throws Exception {         //do nothing now     }  }</code></pre> <h2 id="启动代码">启动代码</h2> <pre><code class="language-java">MqProducer mqProducer = new MqProducer(); mqProducer.start();</code></pre> <p>启动日志：</p> <pre><code>[DEBUG] [2022-04-21 19:17:11.960] [main] [c.g.h.l.i.c.LogFactory.setImplementation] - Logging initialized using 'class com.github.houbb.log.integration.adaptors.stdout.StdOutExImpl' adapter. [INFO] [2022-04-21 19:17:11.974] [Thread-0] [c.g.h.m.p.c.MqProducer.run] - MQ 生产者开始启动客户端 GROUP: P_DEFAULT_GROUP_NAME, PORT: 9527, brokerAddress:  四月 21, 2022 7:17:13 下午 io.netty.handler.logging.LoggingHandler channelRegistered 信息: [id: 0x5cb48145] REGISTERED 四月 21, 2022 7:17:13 下午 io.netty.handler.logging.LoggingHandler connect 信息: [id: 0x5cb48145] CONNECT: localhost/127.0.0.1:9527 四月 21, 2022 7:17:13 下午 io.netty.handler.logging.LoggingHandler channelActive 信息: [id: 0x5cb48145, L:/127.0.0.1:57740 - R:localhost/127.0.0.1:9527] ACTIVE [INFO] [2022-04-21 19:17:13.833] [Thread-0] [c.g.h.m.p.c.MqProducer.run] - MQ 生产者启动客户端完成，监听端口：9527</code></pre> </h1> <p>基于 netty 最基本的服务端启动、客户端启动到这里就结束了。</p> <p>千里之行，始于足下。</p> <p>我们下一节将和大家一起学习，如何实现客户端与服务端之间的交互。</p> <p>希望本文对你有所帮助，如果喜欢，欢迎点赞收藏转发一波。</p> <p>我是老马，期待与你的下次重逢。</p> </h1> <blockquote> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/houbb/mq"  target="_blank" rel="nofollow">The message queue in java.(java 简易版本 mq 实现)</a>:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/houbb/mq"  target="_blank" rel="nofollow">https://github.com/houbb/mq</a></p> </blockquote> </h1> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/houbb/rpc"  target="_blank" rel="nofollow">rpc-从零开始实现 rpc</a>:<a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://github.com/houbb/rpc"  target="_blank" rel="nofollow">https://github.com/houbb/rpc</a></p> <p><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://mp.weixin.qq.com/s/moF528JiVG9dqCi5oFMbVg"  target="_blank" rel="nofollow">【mq】从零开始实现 mq-01-生产者、消费者启动</a></p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-60582.htm">Instant的使用</a></p>
                                        <p>下一个：<a href="/news/article-61152.htm">Python里的引用与拷贝规律</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-60008.htm" title="2021动物疫苗行业前景怎么样 2021动物疫苗行业前景怎么样啊">2021动物疫苗行业前景怎么样 2021动物疫苗行业前景怎么样啊</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-18-free-node-subscribe.htm" title="最佳免费VPN | 2月18日21.6M/S|免费VPN/Clash/SSR/Shadowrocket/V2ray免费节点订阅分享">最佳免费VPN | 2月18日21.6M/S|免费VPN/Clash/SSR/Shadowrocket/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-19-node-share-links.htm" title="最佳免费VPN | 2月19日19M/S|免费VPN/SSR/Clash/Shadowrocket/V2ray免费节点订阅分享">最佳免费VPN | 2月19日19M/S|免费VPN/SSR/Clash/Shadowrocket/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-20-free-node-subscribe.htm" title="最佳免费VPN | 2月20日20.9M/S|免费VPN/SSR/V2ray/Clash/Shadowrocket免费节点订阅分享">最佳免费VPN | 2月20日20.9M/S|免费VPN/SSR/V2ray/Clash/Shadowrocket免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-61152.htm" title="Python里的引用与拷贝规律">Python里的引用与拷贝规律</a></li>
                        <li class="py-2"><a href="/news/article-61745.htm" title="flex布局实现 内容区域高度自适应">flex布局实现 内容区域高度自适应</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-23-node-share.htm" title="最佳免费VPN | 2月23日20.6M/S|免费VPN/SSR/Clash/V2ray/Shadowrocket免费节点订阅分享">最佳免费VPN | 2月23日20.6M/S|免费VPN/SSR/Clash/V2ray/Shadowrocket免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-17-free-high-speed-nodes.htm" title="最佳免费VPN | 2月17日21.5M/S|免费VPN/V2ray/Shadowrocket/Clash/SSR免费节点订阅分享">最佳免费VPN | 2月17日21.5M/S|免费VPN/V2ray/Shadowrocket/Clash/SSR免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-58290.htm" title="动物医院需要什么设备才能开药店（动物医院需要什么设备才能开药店的药）">动物医院需要什么设备才能开药店（动物医院需要什么设备才能开药店的药）</a></li>
                        <li class="py-2"><a href="/news/article-61746.htm" title="动物疫苗多少钱一支啊图片高清大全（动物疫苗一般多少钱）">动物疫苗多少钱一支啊图片高清大全（动物疫苗一般多少钱）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">30</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
        <!-- Copyright -->
    <div class="copyright">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p class="p-small">
                        最佳免费VPN 机场订阅节点中文网 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/v2rayclashfree/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/v2rayclashfree/jquery-3.2.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashfree/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/v2rayclashfree/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/v2rayclashfree/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/v2rayclashfree/replaceme.min.js"></script> <!-- ReplaceMe for rotating text -->
    <script src="/assets/website/js/frontend/v2rayclashfree/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>