<!DOCTYPE html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://topfreevpn.github.io/news/article-79229.htm" />
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>spring boot@EnableXXXX注解编程模型分析</title>
    <meta content="width=device-width, initial-scale=1.0" name="viewport">
        <meta name="description" content="在spring boot中，@EnableXXX注解的功能通常是开启某一种功能。根据某些外部配置自动装配一些bean，来达到开启某些功能的目的。光说很抽象，要具体分析。 @Enable模型的实现方式基" />
    
    <!-- Favicon -->
    <link href="/assets/website/img/v2rayclashfree/favicon.ico" rel="icon">

    <meta name="author" content="最佳免费VPN 机场订阅节点中文网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://topfreevpn.github.io/news/article-79229.htm" />
    <meta property="og:site_name" content="最佳免费VPN 机场订阅节点中文网" />
    <meta property="og:title" content="spring boot@EnableXXXX注解编程模型分析" />
    <meta property="og:image" content="https://topfreevpn.github.io/uploads/20240605/748f9791931953a2542a59435deb7dc9.webp" />
        <meta property="og:release_date" content="2025-03-22T08:50:06" />
    <meta property="og:updated_time" content="2025-03-22T08:50:06" />
        <meta property="og:description" content="在spring boot中，@EnableXXX注解的功能通常是开启某一种功能。根据某些外部配置自动装配一些bean，来达到开启某些功能的目的。光说很抽象，要具体分析。 @Enable模型的实现方式基" />
        
    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="spring boot@EnableXXXX注解编程模型分析">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    <link rel="dns-prefetch" href="https://fonts.googleapis.com">
    
    <!-- Styles -->
    <link href="https://fonts.googleapis.com/css2?family=Open+Sans:ital,wght@0,400;0,600;1,400&display=swap" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/bootstrap.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/fontawesome-all.min.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/swiper.css" rel="stylesheet">
    <link href="/assets/website/css/v2rayclashfree/styles.css" rel="stylesheet">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-Z43TVP4HME"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-Z43TVP4HME');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- Navigation -->
    <nav id="navbarExample" class="navbar navbar-expand-lg fixed-top navbar-light" aria-label="Main navigation">
        <div class="container">
            <a href="/" class="logo">
                        <span>最佳免费VPN</span>
                        </a>
            <!-- Text Logo - Use this if you don't have a graphic logo -->
            <!-- <a class="navbar-brand logo-text" href="index.html">Ioniq</a> -->
            <button class="navbar-toggler p-0 border-0" type="button" id="navbarSideCollapse" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="navbar-collapse offcanvas-collapse" id="navbarsExampleDefault">
                <ul class="navbar-nav ms-auto navbar-nav-scroll">
                                        <li class="nav-item">
                        <a class="nav-link" href="/">首页</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/free-nodes/">免费节点</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/paid-subscribe/">推荐机场</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/news/">新闻资讯</a>
                    </li>
                                        <li class="nav-item">
                        <a class="nav-link" href="/client.htm">客户端</a>
                    </li>
                                    </ul>
            </div> <!-- end of navbar-collapse -->
        </div> <!-- end of container -->
    </nav> <!-- end of navbar -->
    <!-- end of navigation -->
    <!-- Header -->
    <!-- Header -->
    <header class="ex-header">
        <div class="container">
            <div class="row">
                <div class="col-xl-10 offset-xl-1">
                    <h1>spring boot@EnableXXXX注解编程模型分析</h1>
                    <p>
                        <a href="/">首页</a> / <a href="/news/">新闻资讯</a> / <span>正文</span>
                    </p>
                </div> <!-- end of col -->
            </div> <!-- end of row -->
        </div> <!-- end of container -->
    </header> <!-- end of ex-header -->
    <!-- end of header -->
    <!-- Details 1 -->
    <div id="details" class="basic-1 bg-gray">
        <div class="container">
            <div class="row">
                <div class="col-md-9">
                                    <input type="hidden" id="share-website-info" data-name="Clash Node官网订阅站" data-url="https://clashnode.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-dark"> </h1> <p>在spring boot中，@EnableXXX注解的功能通常是开启某一种功能。根据某些外部配置自动装配一些bean，来达到开启某些功能的目的。光说很抽象，要具体分析。</p> <p>@Enable模型的实现方式基本有3种。一个基本的@Enable注解的模型如下。</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-annotation">@Target</span>(ElementType.TYPE) <span class="hljs-annotation">@Retention</span>(RetentionPolicy.RUNTIME) <span class="hljs-annotation">@Documented</span> <span class="hljs-annotation">@Inherited</span> <span class="hljs-annotation">@Import</span>(XXXX.class) <span class="hljs-keyword">public</span> @<span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">EnableDiscoveryClient</span> {<!-- --></span>     <span class="hljs-javadoc">/**     * If true, the ServiceRegistry will automatically register the local server.     */</span>    <span class="hljs-keyword">boolean</span> autoRegister() <span class="hljs-keyword">default</span> <span class="hljs-keyword">true</span>; }</code></pre> <p>对应XXXX.class的不同，有3种实现方式。</p> <ul> <li>普通配置类，里面包含@Bean方法用于实例化bean</li> <li>ImportSelector实现类</li> <li>ImportBeanDefinitionRegistrar实现类</li> </ul> <p>上面3种类都属于@Import注解的导入对象，整个外部化配置过程围绕@Import注解进行解析，导入类。</p> </h1> <p>@Import注解的处理过程大致可以描述为：</p> <ol> <li> <p>寻找BeanFactory中所有被@Configuration注解修饰的类，包括被@Configuration派生注解修饰的类。</p> </li> <li> <p>寻找被@Configuration注解修饰的类上的所有注解元信息（这里的搜索不仅是搜索当前注解，还会迭代往修饰注解的注解的注解上层…..一直搜索@Import，直到注解最原始的注解），获取@Import注解的导入类信息，如果没有则不处理。</p> </li> <li> <p>根据导入类的信息，判定为</p> <ul> <li>普通配置类，里面包含@Bean方法用于实例化bean</li> <li>ImportSelector实现类</li> <li>ImportBeanDefinitionRegistrar实现类</li> </ul> <p>3种形式进行处理。</p> </li> </ol> <p>从context启动开始跟踪主线处理代码，调用链条如下。</p> <ul> <li> <p>org.springframework.context.support.AbstractApplicationContext#refresh</p> </li> <li> <p>org.springframework.context.support.AbstractApplicationContext#invokeBeanFactoryPostProcessors</p> </li> <li> <p>org.springframework.context.annotation.ConfigurationClassPostProcessor#postProcessBeanDefinitionRegistry</p> </li> <li> <p>org.springframework.context.annotation.ConfigurationClassPostProcessor#processConfigBeanDefinitions（主线代码，必看）</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">processConfigBeanDefinitions</span>(BeanDefinitionRegistry registry) {   <span class="hljs-comment">//定义@Conguration注解修饰的类注册信息列表</span>  List&lt;BeanDefinitionHolder&gt; configCandidates = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();  String[] candidateNames = registry.getBeanDefinitionNames(); <span class="hljs-comment">//检查当前context中所有的bean注册信息</span>  <span class="hljs-keyword">for</span> (String beanName : candidateNames) {     BeanDefinition beanDef = registry.getBeanDefinition(beanName);     <span class="hljs-keyword">if</span> (ConfigurationClassUtils.isFullConfigurationClass(beanDef) ||           ConfigurationClassUtils.isLiteConfigurationClass(beanDef)) {        <span class="hljs-keyword">if</span> (logger.isDebugEnabled()) {           logger.debug(<span class="hljs-string">"Bean definition has already been processed as a configuration class: "</span> + beanDef);        }     }      <span class="hljs-comment">//检查class是否是@Conguration注解修饰的类，包括被“继承”@Conguration注解的注解，例如@SpringBootConguration，具体可以跟踪ConfigurationClassUtils.checkConfigurationClassCandidate实现</span>     <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ConfigurationClassUtils.checkConfigurationClassCandidate(beanDef, <span class="hljs-keyword">this</span>.metadataReaderFactory)) {        configCandidates.add(<span class="hljs-keyword">new</span> BeanDefinitionHolder(beanDef, beanName));     }  }   <span class="hljs-comment">// Return immediately if no @Configuration classes were found</span>  <span class="hljs-keyword">if</span> (configCandidates.isEmpty()) {     <span class="hljs-keyword">return</span>;  }   <span class="hljs-comment">// Sort by previously determined @Order value, if applicable</span>   <span class="hljs-comment">//对配置类排序，顺序由Ordered接口决定</span>  configCandidates.sort((bd1, bd2) -&gt; {     <span class="hljs-keyword">int</span> i1 = ConfigurationClassUtils.getOrder(bd1.getBeanDefinition());     <span class="hljs-keyword">int</span> i2 = ConfigurationClassUtils.getOrder(bd2.getBeanDefinition());     <span class="hljs-keyword">return</span> Integer.compare(i1, i2);  });  <span class="hljs-comment">//......略略略</span>   <span class="hljs-comment">// Parse each @Configuration class</span>   <span class="hljs-comment">//处理每一个配置类</span>  ConfigurationClassParser parser = <span class="hljs-keyword">new</span> ConfigurationClassParser(        <span class="hljs-keyword">this</span>.metadataReaderFactory, <span class="hljs-keyword">this</span>.problemReporter, <span class="hljs-keyword">this</span>.environment,        <span class="hljs-keyword">this</span>.resourceLoader, <span class="hljs-keyword">this</span>.componentScanBeanNameGenerator, registry);  Set&lt;BeanDefinitionHolder&gt; candidates = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(configCandidates);  Set&lt;ConfigurationClass&gt; alreadyParsed = <span class="hljs-keyword">new</span> HashSet&lt;&gt;(configCandidates.size());  do {      <span class="hljs-comment">//解析处理配置类逻辑</span>     parser.parse(candidates);       <span class="hljs-comment">//......略略略</span>  }  <span class="hljs-keyword">while</span> (!candidates.isEmpty()); <span class="hljs-comment">//......略略略</span> }</code></pre> </li> <li> <p>org.springframework.context.annotation.ConfigurationClassParser#parse(java.util.Set</p> </li> </ul> <h2 id="importselector">ImportSelector</h2> <pre class="prettyprint"><code class="language-String[] importClassNames = selector.selectImports(currentSourceClass.getMetadata()); hljs avrasm">String[] importClassNames = selector<span class="hljs-preprocessor">.selectImports</span>(currentSourceClass<span class="hljs-preprocessor">.getMetadata</span>())<span class="hljs-comment">;</span></code></pre> <p>返回结果是所有需要导入的的类的全限定名。</p> <p>对于全限定名数组，逐个进行org.springframework.context.annotation.ConfigurationClassParser#processImports，相当于循环调用processImports，把新导入的类也当做@Import导入的类处理，如果新导入的类继续导入新的类，就继续org.springframework.context.annotation.ConfigurationClassParser#processImports。直到新导入的类不是</p> <p><code>ImportSelector</code>。</p> <h2 id="importbeandefinitionregistrar处理">ImportBeanDefinitionRegistrar处理</h2> <p>当@Import的类是不是ImportSelector之后，如果是ImportBeanDefinitionRegistrar，那就做BeanDefinition信息注册到BeanFactory操作，具体实现在org.springframework.context.annotation.ImportBeanDefinitionRegistrar#registerBeanDefinitions实现，在这里的处理过程是。</p> <pre class="prettyprint"><code class="hljs avrasm">else if (candidate<span class="hljs-preprocessor">.isAssignable</span>(ImportBeanDefinitionRegistrar<span class="hljs-preprocessor">.class</span>)) {    // Candidate class is an ImportBeanDefinitionRegistrar -&gt;    // delegate to it to register additional bean definitions    Class&lt;?&gt; candidateClass = candidate<span class="hljs-preprocessor">.loadClass</span>()<span class="hljs-comment">;</span>    ImportBeanDefinitionRegistrar registrar =          BeanUtils<span class="hljs-preprocessor">.instantiateClass</span>(candidateClass, ImportBeanDefinitionRegistrar<span class="hljs-preprocessor">.class</span>)<span class="hljs-comment">;</span>    ParserStrategyUtils<span class="hljs-preprocessor">.invokeAwareMethods</span>(          registrar, this<span class="hljs-preprocessor">.environment</span>, this<span class="hljs-preprocessor">.resourceLoader</span>, this<span class="hljs-preprocessor">.registry</span>)<span class="hljs-comment">;</span>          //将ImportBeanDefinitionRegistrar放入map缓存起来    configClass<span class="hljs-preprocessor">.addImportBeanDefinitionRegistrar</span>(registrar, currentSourceClass<span class="hljs-preprocessor">.getMetadata</span>())<span class="hljs-comment">;</span> } </code></pre> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">addImportBeanDefinitionRegistrar</span>(ImportBeanDefinitionRegistrar registrar, AnnotationMetadata importingClassMetadata) {    <span class="hljs-keyword">this</span>.importBeanDefinitionRegistrars.put(registrar, importingClassMetadata); }</code></pre> <p>先缓存@Import导入的ImportBeanDefinitionRegistrar信息，稍后统一调用ImportBeanDefinitionRegistrar加载注册BeanDefinition信息。</p> <h2 id="configurtion注解的类处理">@Configurtion注解的类处理</h2> <p>重复上面的整个流程，处理这个被@Configuration注解标注的类。比较需要注意的是一般@Configuration注解标注的类常用@Bean方式来实例化实例。这里#Bean也会解析出一个BeanMethod信息集合，稍后跟ImportBeanDefinitionRegistrar的缓存信息一样统一调用然后注册BeanDefinition。</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-comment">// Process individual @Bean methods</span> <span class="hljs-comment">//对配置类的@Bean方法处理逻辑</span> <span class="hljs-comment">//获取所有@Bean标注的方法元信息，后续处理</span> Set&lt;MethodMetadata&gt; beanMethods = retrieveBeanMethodMetadata(sourceClass); <span class="hljs-keyword">for</span> (MethodMetadata methodMetadata : beanMethods) {    configClass.addBeanMethod(<span class="hljs-keyword">new</span> BeanMethod(methodMetadata, configClass)); }</code></pre> <h2 id="统一调用配置类解析出来的信息注册beandefinition">统一调用配置类解析出来的信息注册BeanDefinition</h2> <p>在解析完配置类之后，实际还没有进行BeanDefinition的注册，只得到了可以用来注册BeanDefinition的“信息工具”，利用@Bean得到了BeanMethod，@Import（xxxImportBeanDefinitionRegistrar.class）得到了ImportBeanDefinitionRegistrar的实现类。最终要使用这些工具进行BeanDefinition 信息注册。</p> <p>org.springframework.context.annotation.ConfigurationClassPostProcessor#processConfigBeanDefinitions中，当处理完@Configuration注解的类之后就进行ImportBeanDefinitionRegistrar的BeanDefinition注册加载。</p> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-comment">//处理@Configuration,递归寻找@Configuration，以及解析@Configuration里面的@Import、@Bean、@Component、@ImportResource等。</span> parser.parse(candidates); parser.validate();  <span class="hljs-comment">//获取parser中解析得到的所有配置类</span> Set&lt;ConfigurationClass&gt; configClasses = <span class="hljs-keyword">new</span> LinkedHashSet&lt;&gt;(parser.getConfigurationClasses()); configClasses.removeAll(alreadyParsed);  <span class="hljs-comment">// Read the model and create bean definitions based on its content</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.reader == <span class="hljs-keyword">null</span>) {    <span class="hljs-keyword">this</span>.reader = <span class="hljs-keyword">new</span> ConfigurationClassBeanDefinitionReader(          registry, <span class="hljs-keyword">this</span>.sourceExtractor, <span class="hljs-keyword">this</span>.resourceLoader, <span class="hljs-keyword">this</span>.environment,          <span class="hljs-keyword">this</span>.importBeanNameGenerator, parser.getImportRegistry()); } <span class="hljs-comment">//根据递归找出的配置类和解析配置类得到的信息，加载BeanDefinition</span> <span class="hljs-keyword">this</span>.reader.loadBeanDefinitions(configClasses); </code></pre> <ul> <li> <p>org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitions</p> <ul> <li>org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsForConfigurationClass</li> </ul> <pre class="prettyprint"><code class="language-java hljs"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">loadBeanDefinitionsForConfigurationClass</span>(       ConfigurationClass configClass, TrackedConditionEvaluator trackedConditionEvaluator) {     <span class="hljs-keyword">if</span> (trackedConditionEvaluator.shouldSkip(configClass)) {       String beanName = configClass.getBeanName();       <span class="hljs-keyword">if</span> (StringUtils.hasLength(beanName) &amp;&amp; <span class="hljs-keyword">this</span>.registry.containsBeanDefinition(beanName)) {          <span class="hljs-keyword">this</span>.registry.removeBeanDefinition(beanName);       }       <span class="hljs-keyword">this</span>.importRegistry.removeImportingClass(configClass.getMetadata().getClassName());       <span class="hljs-keyword">return</span>;    }     <span class="hljs-keyword">if</span> (configClass.isImported()) {       registerBeanDefinitionForImportedConfigurationClass(configClass);    }    <span class="hljs-keyword">for</span> (BeanMethod beanMethod : configClass.getBeanMethods()) {        <span class="hljs-comment">//利用@Bean的Method加载BeanDefinition</span>       loadBeanDefinitionsForBeanMethod(beanMethod);    }    loadBeanDefinitionsFromImportedResources(configClass.getImportedResources());     <span class="hljs-comment">//利用缓存的ImportBeanDefinitionRegistrar加载注册beandefintion</span>    loadBeanDefinitionsFromRegistrars(configClass.getImportBeanDefinitionRegistrars()); }</code></pre> <ul> <li>org.springframework.context.annotation.ConfigurationClassBeanDefinitionReader#loadBeanDefinitionsFromRegistrars（以ImportBeanDefinitionRegistrar为例跟踪）  <ul> <li>org.springframework.context.annotation.ImportBeanDefinitionRegistrar#registerBeanDefinitions（注册BeanDefinition信息到BeanFactory）</li> </ul> </li> </ul> </li> </ul> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-78550.htm">动物医院好评语30字左右 动物医院好评语30字左右怎么写</a></p>
                                        <p>下一个：<a href="/news/article-79230.htm">深圳领养宠物的地方（深圳领养宠物的地方在哪里）</a></p>
                                    </div>
                                </div>
                <div class="col-md-3">
                    <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-62352.htm" title="动物医院英文缩写是什么意思啊（动物医院的）">动物医院英文缩写是什么意思啊（动物医院的）</a></li>
                        <li class="py-2"><a href="/news/article-63535.htm" title="妙三多是几联（妙三多是几联疫苗）">妙三多是几联（妙三多是几联疫苗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-20-node-share.htm" title="最佳免费VPN | 3月20日18.8M/S|免费VPN/SSR/Shadowrocket/Clash/V2ray免费节点订阅分享">最佳免费VPN | 3月20日18.8M/S|免费VPN/SSR/Shadowrocket/Clash/V2ray免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-69182.htm" title="属马人养猫好吗（属马养猫好不好）">属马人养猫好吗（属马养猫好不好）</a></li>
                        <li class="py-2"><a href="/news/article-64770.htm" title="八公家宠物酒店（八公家宠物酒店怎么样）">八公家宠物酒店（八公家宠物酒店怎么样）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-1-node-share-links.htm" title="最佳免费VPN | 3月1日18.5M/S|免费VPN/SSR/Shadowrocket/V2ray/Clash免费节点订阅分享">最佳免费VPN | 3月1日18.5M/S|免费VPN/SSR/Shadowrocket/V2ray/Clash免费节点订阅分享</a></li>
                        <li class="py-2"><a href="/news/article-61153.htm" title="重庆宠物领养中心地址查询（重庆宠物之家免费领养）">重庆宠物领养中心地址查询（重庆宠物之家免费领养）</a></li>
                        <li class="py-2"><a href="/news/article-78550.htm" title="动物医院好评语30字左右 动物医院好评语30字左右怎么写">动物医院好评语30字左右 动物医院好评语30字左右怎么写</a></li>
                        <li class="py-2"><a href="/news/article-76502.htm" title="RabbitMQ数据同步一致性解决方案">RabbitMQ数据同步一致性解决方案</a></li>
                        <li class="py-2"><a href="/news/article-60007.htm" title="宠物粮食品牌前十排名榜图片大全（宠物粮种类）">宠物粮食品牌前十排名榜图片大全（宠物粮种类）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">66</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">42</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                    </ul>
    </div>
</div>



                </div>
            </div>
        </div> <!-- end of container -->
    </div> <!-- end of basic-1 -->
    <!-- end of details 1 -->
        <!-- Copyright -->
    <div class="copyright">
        <div class="container">
            <div class="row">
                <div class="col-lg-12">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                    <p class="p-small">
                        最佳免费VPN 机场订阅节点中文网 版权所有
                        <br />
                        Powered by WordPress
                    </p>
                </div> <!-- end of col -->
            </div> <!-- enf of row -->
        </div> <!-- end of container -->
    </div> <!-- end of copyright -->
    <!-- end of copyright -->
    <!-- Back To Top Button -->
    <button onclick="topFunction()" id="myBtn">
        <img src="/assets/website/img/v2rayclashfree/up-arrow.png" alt="alternative">
    </button>
    <!-- end of back to top button -->
    <!-- Scripts -->
    <script src="/assets/website/js/frontend/v2rayclashfree/jquery-3.2.1.min.js"></script>
    <script src="/assets/website/js/frontend/v2rayclashfree/bootstrap.min.js"></script> <!-- Bootstrap framework -->
    <script src="/assets/website/js/frontend/v2rayclashfree/swiper.min.js"></script> <!-- Swiper for image and text sliders -->
    <script src="/assets/website/js/frontend/v2rayclashfree/purecounter.min.js"></script> <!-- Purecounter counter for statistics numbers -->
    <script src="/assets/website/js/frontend/v2rayclashfree/replaceme.min.js"></script> <!-- ReplaceMe for rotating text -->
    <script src="/assets/website/js/frontend/v2rayclashfree/scripts.js"></script> <!-- Custom scripts -->
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
    <script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>